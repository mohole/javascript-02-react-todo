{"version":3,"sources":["components/Search.js","components/List.js","App.js","reportWebVitals.js","index.js"],"names":["Search","props","useState","text","setText","htmlFor","type","name","value","onChange","event","target","toLowerCase","update","List","data","map","element","i","checked","completed","title","App","todos","setTodos","backup","setBackup","useEffect","fetch","then","resp","json","className","searchValue","filtered","filter","search","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAGMA,G,MAAS,SAACC,GAAU,MAKAC,mBAASD,EAAME,MAAQ,IALvB,mBAKjBA,EALiB,KAKXC,EALW,KAmBxB,OACE,iCACE,uBAAOC,QAAQ,SAAf,qBACA,uBACEC,KAAK,OACLC,KAAK,SACLC,MAAOL,EACPM,SAnBS,SAACC,GACd,IAAMF,EAAQE,EAAMC,OAAOH,MAAMI,cACjCR,EAAQI,GAKJP,EAAMY,QACRZ,EAAMY,OAAOL,WCjBbM,EAAO,SAACb,GAGZ,IAAMc,EAAOd,EAAMc,MAAQ,GAE3B,OACE,6BACIA,EAAKC,KAAI,SAACC,EAAQC,GAAT,OAAe,+BACxB,uBAAOZ,KAAK,WAAWa,QAASF,EAAQG,YACxC,gCAAQH,EAAQI,UAFiBH,SCoC1BI,MArCf,WAAe,MAEapB,mBAAS,IAFtB,mBAENqB,EAFM,KAECC,EAFD,OAIetB,mBAAS,IAJxB,mBAINuB,EAJM,KAIEC,EAJF,KA4Bb,OAZAC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAE,GACJP,EAASO,GACTL,EAAUK,QAEb,IAMD,sBAAKC,UAAU,MAAf,UACE,4DACA,cAAC,EAAD,CAAQnB,OAzBS,SAACoB,GACpB,IAAMC,EAAWT,EAAOU,QAAO,SAAClB,GAE9B,OADYA,EAAQI,MAAMT,cACfwB,OAAOH,IAAgB,KAGpCT,EAASU,MAoBP,cAAC,EAAD,CAAMnB,KAAMQ,QC3BHc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.afac9d45.chunk.js","sourcesContent":["\nimport { useState } from 'react';\n\nconst Search = (props) => {\n  // Creo uno stato locale del componente, utilizzando una prop come valore iniziale\n  // o se non è stata fornita una stringa vuota. Da questo stato locale vengono generati\n  // un getter e un setter per poter leggere e scrivere lo stato.\n  // https://reactjs.org/docs/hooks-state.html\n  const [text, setText] = useState(props.text || '');\n\n  const typing = (event) => {\n    const value = event.target.value.toLowerCase();\n    setText(value);\n\n    // controllo se è stata valorizzata la prop \"update\", ed eventualmente\n    // eseguo la funzione al suo interno passando il valore che voglio mandare\n    // al componente parent\n    if (props.update){\n      props.update(value);\n    }\n  }\n\n  return (\n    <form>\n      <label htmlFor=\"search\">Search:</label>\n      <input \n        type=\"text\" \n        name=\"search\" \n        value={text}\n        onChange={typing}\n      ></input>\n    </form>      \n  )\n\n  // https://reactjs.org/docs/handling-events.html\n}\n\nexport {\n  Search\n}","\nconst List = (props) => {\n  // Fare sempre un controllo di valorizzazione delle props prima di\n  // passarle al template, ed eventualmente fornire un valore predefinito\n  const data = props.data || [];\n\n  return (\n    <ul>\n      { data.map((element,i) => <li key={i}>\n        <input type=\"checkbox\" checked={element.completed} ></input>\n        <label>{element.title}</label>\n      </li>) }\n    </ul>      \n  )\n\n  // quando credo template con liste dinamiche è FONDAMENTALE identificare\n  // ogni elemento con un attributo \"key\" univoco\n  // https://reactjs.org/docs/lists-and-keys.html#keys\n}\n\nexport {\n  List\n}","import './App.css';\n\nimport { useState, useEffect } from 'react';\n\nimport { Search } from './components/Search';\nimport { List } from './components/List';\n\nfunction App() {\n  // Lista di todo che renderizzeremo in app\n  const [todos, setTodos] = useState([]);\n  // Copia della versione originale della lista di todo\n  const [backup, setBackup] = useState([]);\n\n  const updateSearch = (searchValue) => {\n    const filtered = backup.filter((element) => {\n      const str = element.title.toLowerCase();\n      return str.search(searchValue) > -1;\n    });\n\n    setTodos(filtered);\n  }\n\n  // Eseguiamo la fetch dei dati remoti SOLO al primo render del componente\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/todos')\n      .then(resp => resp.json())\n      .then(json => {\n        setTodos(json);\n        setBackup(json);\n      });\n  }, []);\n  // se l'ultimo argomento di useEffect è un array vuoto, si comporta da \n  // evento di lifecycle \"componentDidMount\"\n  // https://reactjs.org/docs/hooks-effect.html\n\n  return (\n    <div className=\"App\">\n      <h1>To Do List - React version</h1>\n      <Search update={updateSearch} />\n      <List data={todos} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}